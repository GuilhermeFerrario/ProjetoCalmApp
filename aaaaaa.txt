from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

# Criação da aplicação Flask
app = Flask(__name__)

# Configuração do banco de dados (SQLite)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///medicos.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Criação do objeto SQLAlchemy
db = SQLAlchemy(app)

# Modelo de dados para os médicos
class Medico(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    crm = db.Column(db.String(20), unique=True, nullable=False)
    especialidade = db.Column(db.String(50), nullable=False)

    def __repr__(self):
        return f'<Medico {self.nome}>'

# Rota para criar o banco de dados (caso não exista)
@app.before_first_request
def criar_banco():
    db.create_all()

# Rota para cadastro de médicos (POST)
@app.route('/cadastro', methods=['POST'])
def cadastro_medico():
    data = request.get_json()  # Pega os dados enviados no formato JSON

    # Verifica se os dados necessários foram enviados
    if 'nome' not in data or 'email' not in data or 'crm' not in data or 'especialidade' not in data:
        return jsonify({"message": "Dados incompletos, os campos nome, email, crm e especialidade são obrigatórios!"}), 400

    # Cria um novo médico e adiciona ao banco de dados
    medico = Medico(
        nome=data['nome'],
        email=data['email'],
        crm=data['crm'],
        especialidade=data['especialidade']
    )

    # Adiciona o médico ao banco de dados
    db.session.add(medico)
    db.session.commit()

    # Retorna a resposta de sucesso
    return jsonify({"message": "Médico cadastrado com sucesso!", "medico": {
        "nome": medico.nome,
        "email": medico.email,
        "crm": medico.crm,
        "especialidade": medico.especialidade
    }}), 201

# Rota para listar todos os médicos cadastrados (GET)
@app.route('/medicos', methods=['GET'])
def listar_medicos():
    medicos = Medico.query.all()  # Pega todos os médicos do banco de dados
    resultado = []
    for medico in medicos:
        resultado.append({
            "nome": medico.nome,
            "email": medico.email,
            "crm": medico.crm,
            "especialidade": medico.especialidade
        })
    return jsonify({"medicos": resultado}), 200

if __name__ == '__main__':
    app.run(debug=True)
